let currentSection = 'home';
let cart = [];
let currentBook = null;
let currentPage = 1;
let totalPages = 10;
let fontSize = 18;
let isDarkTheme = false;
let currentUser = null;

let users = [
    {
        id: 1,
        name: "Test ƒ∞stifad…ô√ßisi",
        email: "test@kitab.az",
        password: "123456"
    }
];

const freeBooks = [
    {
        id: 1,
        title: "Az…ôrbaycan Tarixi",
        author: "M√º…ôllif Adƒ±",
        genre: "Tarix",
        price: "Pulsuz",
        isFree: true,
        content: "Bu kitab Az…ôrbaycanƒ±n q…ôdim tarixind…ôn ba≈ülayaraq m√ºasir d√∂vr…ô q…ôd…ôrki hadis…ôl…ôri …ôhat…ô edir. √ñlk…ômizin z…ôngin m…ôd…ôni irsini v…ô milli d…ôy…ôrl…ôrini √∂yr…ônm…ôk √º√ß√ºn …ôv…ôzsiz m…ônb…ôdir..."
    },
    {
        id: 2,
        title: "Koroƒülu Dastanƒ±",
        author: "Xalq Yaradƒ±cƒ±lƒ±ƒüƒ±",
        genre: "Dastan",
        price: "Pulsuz",
        isFree: true,
        content: "Koroƒülu - Az…ôrbaycan xalqƒ±nƒ±n …ôn m…ô≈ühur q…ôhr…ôman dastanlarƒ±ndan biridir. Bu dastan xalqƒ±mƒ±zƒ±n …ôdal…ôt v…ô azadlƒ±q uƒürunda m√ºbariz…ô ruhunu …ôks etdirir..."
    },
    {
        id: 3,
        title: "Nizami G…ônc…ôvi",
        author: "Klassik ∆èd…ôbiyyat",
        genre: "Poeziya",
        price: "Pulsuz",
        isFree: true,
        content: "Nizami G…ônc…ôvi d√ºnya …ôd…ôbiyyatƒ±nƒ±n …ôn b√∂y√ºk ≈üairl…ôrind…ôn biridir. Onun …ôs…ôrl…ôri h…ôm milli, h…ôm d…ô universal d…ôy…ôrl…ôr da≈üƒ±yƒ±r..."
    },
    {
        id: 4,
        title: "Az…ôrbaycan Dili",
        author: "Dil M√ºt…ôx…ôssisi",
        genre: "Dil √∂yr…ônm…ô",
        price: "Pulsuz",
        isFree: true,
        content: "Az…ôrbaycan dilinin qrammatikasƒ±, leksikasƒ± v…ô √ºslubiyyat x√ºsusiyy…ôtl…ôri haqqƒ±nda …ôtraflƒ± m…ôlumat. Ana dilimizi daha yax≈üƒ± √∂yr…ônm…ôk ist…ôy…ônl…ôr √º√ß√ºn ideal kitabdƒ±r..."
    }
];

const paidBooks = [
    {
        id: 5,
        title: "M√ºasir Az…ôrbaycan ∆èd…ôbiyyatƒ±",
        author: "Tanƒ±nmƒ±≈ü Yazƒ±√ßƒ±",
        genre: "∆èd…ôbiyyat",
        price: "15.00 AZN",
        isFree: false,
        content: "XX v…ô XXI …ôsr Az…ôrbaycan …ôd…ôbiyyatƒ±nƒ±n inki≈üaf yollarƒ±, …ôsas n√ºmay…ônd…ôl…ôri v…ô onlarƒ±n yaradƒ±cƒ±lƒ±ƒüƒ± haqqƒ±nda fundamental t…ôdqiqat..."
    },
    {
        id: 6,
        title: "ƒ∞qtisadiyyat ∆èsaslarƒ±",
        author: "Prof. Dr. M√º…ôllif",
        genre: "ƒ∞qtisadiyyat",
        price: "25.00 AZN",
        isFree: false,
        content: "ƒ∞qtisadiyyatƒ±n …ôsas prinsipl…ôri, bazar mexanizml…ôri v…ô m√ºasir iqtisadi n…ôz…ôriyy…ôl…ôr haqqƒ±nda …ôtraflƒ± izahat..."
    },
    {
        id: 7,
        title: "Komp√ºter Elml…ôri",
        author: "Texnologiya M√ºt…ôx…ôssisi",
        genre: "Texnologiya",
        price: "30.00 AZN",
        isFree: false,
        content: "Proqramla≈üdƒ±rma, alqoritml…ôr v…ô m…ôlumat strukturlarƒ± haqqƒ±nda m√ºasir yana≈ümalar v…ô praktiki n√ºmun…ôl…ôr..."
    },
    {
        id: 8,
        title: "Psixologiya",
        author: "Psixoloq",
        genre: "Psixologiya",
        price: "20.00 AZN",
        isFree: false,
        content: "ƒ∞nsan psixologiyasƒ±nƒ±n …ôsaslarƒ±, ≈ü…ôxsiyy…ôt inki≈üafƒ± v…ô davranƒ±≈ü modell…ôrinin t…ôhlili..."
    }
];

document.addEventListener('DOMContentLoaded', function() {
    showSection('home');
    loadBooks();
    updateCartDisplay();
    setupFormListeners();
    checkLoginStatus();
});

function setupFormListeners() {
    document.getElementById('loginForm').addEventListener('submit', function(e) {
        e.preventDefault();
        handleLogin();
    });
    
    document.getElementById('registerForm').addEventListener('submit', function(e) {
        e.preventDefault();
        handleRegister();
    });
}

function showLoginModal() {
    if (currentUser) {
        if (confirm('√áƒ±xƒ±≈ü etm…ôk ist…ôyirsiniz?')) {
            logout();
        }
        return;
    }
    
    document.getElementById('loginModal').style.display = 'flex';
    document.getElementById('registerModal').style.display = 'none';
}

function closeLoginModal() {
    document.getElementById('loginModal').style.display = 'none';
}

function showRegisterForm() {
    document.getElementById('loginModal').style.display = 'none';
    document.getElementById('registerModal').style.display = 'flex';
}

function closeRegisterModal() {
    document.getElementById('registerModal').style.display = 'none';
}

function handleLogin() {
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    
    const user = users.find(u => u.email === email && u.password === password);
    
    if (user) {
        currentUser = user;
        updateLoginButton();
        closeLoginModal();
        alert(`Xo≈ü g…ôlmisiniz, ${user.name}!`);
        
        document.getElementById('loginForm').reset();
    } else {
        alert('E-mail v…ô ya ≈üifr…ô s…ôhvdir!');
    }
}

function handleRegister() {
    const name = document.getElementById('registerName').value;
    const email = document.getElementById('registerEmail').value;
    const password = document.getElementById('registerPassword').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    if (password !== confirmPassword) {
        alert('≈ûifr…ôl…ôr uyƒüun g…ôlmir!');
        return;
    }
    
    if (password.length < 6) {
        alert('≈ûifr…ô …ôn azƒ± 6 simvol olmalƒ±dƒ±r!');
        return;
    }
    
    if (users.find(u => u.email === email)) {
        alert('Bu e-mail artƒ±q qeydiyyatdan ke√ßib!');
        return;
    }
    
    const newUser = {
        id: users.length + 1,
        name: name,
        email: email,
        password: password
    };
    
    users.push(newUser);
    currentUser = newUser;
    
    updateLoginButton();
    closeRegisterModal();
    alert(`Qeydiyyat uƒüurlu! Xo≈ü g…ôlmisiniz, ${name}!`);
    
    document.getElementById('registerForm').reset();
}

function updateLoginButton() {
    const loginButton = document.getElementById('loginButton');
    
    if (currentUser) {
        loginButton.innerHTML = `
            <div class="user-profile">
                üë§ ${currentUser.name}
                <button class="logout-btn" onclick="logout()">√áƒ±xƒ±≈ü</button>
            </div>
        `;
    } else {
        loginButton.innerHTML = 'üë§ Daxil ol';
    }
}

function logout() {
    currentUser = null;
    updateLoginButton();
    alert('Uƒüurla √ßƒ±xƒ±≈ü etdiniz!');
}

function checkLoginStatus() {
    updateLoginButton();
}
function showSection(sectionName) {
    const sections = ['home', 'unpaid', 'paid', 'reading', 'about', 'contact'];
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            element.style.display = 'none';
        }
    });
    dS
    const selecteection = document.getElementById(sectionName);
    if (selectedSection) {
        selectedSection.style.display = 'block';
    }
    
    currentSection = sectionName;
    
    if (sectionName === 'unpaid' || sectionName === 'paid') {
        loadBooks();
    }
}

function loadBooks() {
    const freeBooksContainer = document.getElementById('freeBooks');
    const paidBooksContainer = document.getElementById('paidBooks');
    
    if (freeBooksContainer) {
        freeBooksContainer.innerHTML = '';
        freeBooks.forEach(book => {
            freeBooksContainer.appendChild(createBookCard(book));
        });
    }
    
    if (paidBooksContainer) {
        paidBooksContainer.innerHTML = '';
        paidBooks.forEach(book => {
            paidBooksContainer.appendChild(createBookCard(book));
        });
    }
}

function createBookCard(book) {
    const card = document.createElement('div');
    card.className = 'book-card';
    
    card.innerHTML = `
        <div class="book-cover">
            üìñ ${book.title}
        </div>
        <div class="book-info">
            <h3>${book.title}</h3>
            <div class="author">M√º…ôllif: ${book.author}</div>
            <div class="genre">${book.genre}</div>
            <div class="price ${book.isFree ? 'free' : ''}">${book.price}</div>
            <div class="book-actions">
                <button class="btn btn-primary" onclick="readBook(${book.id})">
                    Oxu
                </button>
                ${!book.isFree ? `<button class="btn btn-secondary" onclick="addToCart(${book.id})">S…ôb…ôt…ô …ôlav…ô et</button>` : ''}
            </div>
        </div>
    `;
    
    return card;
}

function searchBooks() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    if (!searchTerm) return;
    
    const allBooks = [...freeBooks, ...paidBooks];
    const filteredBooks = allBooks.filter(book => 
        book.title.toLowerCase().includes(searchTerm) ||
        book.author.toLowerCase().includes(searchTerm) ||
        book.genre.toLowerCase().includes(searchTerm)
    );
    
    showSearchResults(filteredBooks);
}

function showSearchResults(books) {
    let searchSection = document.getElementById('searchResults');
    if (!searchSection) {
        searchSection = document.createElement('section');
        searchSection.id = 'searchResults';
        searchSection.className = 'books-section';
        document.body.appendChild(searchSection);
    }
    
    searchSection.innerHTML = `
        <div class="container">
            <h2>Axtarƒ±≈ü N…ôtic…ôl…ôri</h2>
            <div class="books-grid" id="searchBooksGrid">
            </div>
        </div>
    `;
    
    const searchGrid = document.getElementById('searchBooksGrid');
    books.forEach(book => {
        searchGrid.appendChild(createBookCard(book));
    });
    
    showSection('searchResults');
}

function readBook(bookId) {
    const allBooks = [...freeBooks, ...paidBooks];
    const book = allBooks.find(b => b.id === bookId);
    
    if (!book) return;
    
    if (!book.isFree && !isPurchased(bookId)) {
        alert('Bu kitabƒ± oxumaq √º√ß√ºn …ôvv…ôlc…ô satƒ±n almalƒ±sƒ±nƒ±z!');
        return;
    }
    
    currentBook = book;
    currentPage = 1;
    totalPages = Math.ceil(book.content.length / 500);
    
    document.getElementById('currentBookTitle').textContent = book.title;
    document.getElementById('readerContent').textContent = getPageContent(book.content, currentPage);
    updatePageInfo();
    
    showSection('reading');
}

function getPageContent(fullContent, pageNumber) {
    const wordsPerPage = 100;
    const words = fullContent.split(' ');
    const startIndex = (pageNumber - 1) * wordsPerPage;
    const endIndex = startIndex + wordsPerPage;
    return words.slice(startIndex, endIndex).join(' ');
}

function previousPage() {
    if (currentPage > 1) {
        currentPage--;
        document.getElementById('readerContent').textContent = getPageContent(currentBook.content, currentPage);
        updatePageInfo();
    }
}

function nextPage() {
    if (currentPage < totalPages) {
        currentPage++;
        document.getElementById('readerContent').textContent = getPageContent(currentBook.content, currentPage);
        updatePageInfo();
    }
}

function updatePageInfo() {
    document.getElementById('pageInfo').textContent = `S…ôhif…ô ${currentPage} / ${totalPages}`;
}

function increaseFontSize() {
    fontSize += 2;
    document.getElementById('readerContent').style.fontSize = fontSize + 'px';
}

function decreaseFontSize() {
    if (fontSize > 12) {
        fontSize -= 2;
        document.getElementById('readerContent').style.fontSize = fontSize + 'px';
    }
}

function toggleTheme() {
    const readerContent = document.getElementById('readerContent');
    isDarkTheme = !isDarkTheme;
    
    if (isDarkTheme) {
        readerContent.style.background = '#2d3748';
        readerContent.style.color = '#e2e8f0';
    } else {
        readerContent.style.background = 'white';
        readerContent.style.color = '#333';
    }
}

function goBack() {
    if (currentSection === 'reading') {
        showSection('unpaid');
    }
}
function showSection(sectionName) {
    const sections = ['home', 'unpaid', 'paid', 'reading', 'about', 'contact'];
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            element.style.display = 'none';
        }
    });
    
    const selectedSection = document.getElementById(sectionName);
    if (selectedSection) {
        selectedSection.style.display = 'block';
    }
    
    currentSection = sectionName;
    
    if (sectionName === 'unpaid' || sectionName === 'paid') {
        loadBooks();
    }
}

function loadBooks() {
    const freeBooksContainer = document.getElementById('freeBooks');
    const paidBooksContainer = document.getElementById('paidBooks');
    
    if (freeBooksContainer) {
        freeBooksContainer.innerHTML = '';
        freeBooks.forEach(book => {
            freeBooksContainer.appendChild(createBookCard(book));
        });
    }
    
    if (paidBooksContainer) {
        paidBooksContainer.innerHTML = '';
        paidBooks.forEach(book => {
            paidBooksContainer.appendChild(createBookCard(book));
        });
    }
}

function createBookCard(book) {
    const card = document.createElement('div');
    card.className = 'book-card';
    
    card.innerHTML = `
        <div class="book-cover">
            üìñ ${book.title}
        </div>
        <div class="book-info">
            <h3>${book.title}</h3>
            <div class="author">M√º…ôllif: ${book.author}</div>
            <div class="genre">${book.genre}</div>
            <div class="price ${book.isFree ? 'free' : ''}">${book.price}</div>
            <div class="book-actions">
                <button class="btn btn-primary" onclick="readBook(${book.id})">
                    Oxu
                </button>
                ${!book.isFree ? `<button class="btn btn-secondary" onclick="addToCart(${book.id})">S…ôb…ôt…ô …ôlav…ô et</button>` : ''}
            </div>
        </div>
    `;
    
    return card;
}

function searchBooks() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    if (!searchTerm) return;
    
    const allBooks = [...freeBooks, ...paidBooks];
    const filteredBooks = allBooks.filter(book => 
        book.title.toLowerCase().includes(searchTerm) ||
        book.author.toLowerCase().includes(searchTerm) ||
        book.genre.toLowerCase().includes(searchTerm)
    );
    
    showSearchResults(filteredBooks);
}

function showSearchResults(books) {
    let searchSection = document.getElementById('searchResults');
    if (!searchSection) {
        searchSection = document.createElement('section');
        searchSection.id = 'searchResults';
        searchSection.className = 'books-section';
        document.body.appendChild(searchSection);
    }
    
    searchSection.innerHTML = `
        <div class="container">
            <h2>Axtarƒ±≈ü N…ôtic…ôl…ôri</h2>
            <div class="books-grid" id="searchBooksGrid">
            </div>
        </div>
    `;
    
    const searchGrid = document.getElementById('searchBooksGrid');
    books.forEach(book => {
        searchGrid.appendChild(createBookCard(book));
    });
    
    showSection('searchResults');
}

function readBook(bookId) {
    const allBooks = [...freeBooks, ...paidBooks];
    const book = allBooks.find(b => b.id === bookId);
    
    if (!book) return;
    
    if (!book.isFree && !isPurchased(bookId)) {
        alert('Bu kitabƒ± oxumaq √º√ß√ºn …ôvv…ôlc…ô satƒ±n almalƒ±sƒ±nƒ±z!');
        return;
    }
    
    currentBook = book;
    currentPage = 1;
    totalPages = Math.ceil(book.content.length / 500);
    
    document.getElementById('currentBookTitle').textContent = book.title;
    document.getElementById('readerContent').textContent = getPageContent(book.content, currentPage);
    updatePageInfo();
    
    showSection('reading');
}

function getPageContent(fullContent, pageNumber) {
    const wordsPerPage = 100;
    const words = fullContent.split(' ');
    const startIndex = (pageNumber - 1) * wordsPerPage;
    const endIndex = startIndex + wordsPerPage;
    return words.slice(startIndex, endIndex).join(' ');
}

function previousPage() {
    if (currentPage > 1) {
        currentPage--;
        document.getElementById('readerContent').textContent = getPageContent(currentBook.content, currentPage);
        updatePageInfo();
    }
}

function nextPage() {
    if (currentPage < totalPages) {
        currentPage++;
        document.getElementById('readerContent').textContent = getPageContent(currentBook.content, currentPage);
        updatePageInfo();
    }
}

function updatePageInfo() {
    document.getElementById('pageInfo').textContent = `S…ôhif…ô ${currentPage} / ${totalPages}`;
}

function increaseFontSize() {
    fontSize += 2;
    document.getElementById('readerContent').style.fontSize = fontSize + 'px';
}

function decreaseFontSize() {
    if (fontSize > 12) {
        fontSize -= 2;
        document.getElementById('readerContent').style.fontSize = fontSize + 'px';
    }
}

function toggleTheme() {
    const readerContent = document.getElementById('readerContent');
    isDarkTheme = !isDarkTheme;
    
    if (isDarkTheme) {
        readerContent.style.background = '#2d3748';
        readerContent.style.color = '#e2e8f0';
    } else {
        readerContent.style.background = 'white';
        readerContent.style.color = '#333';
    }
}

function goBack() {
    if (currentSection === 'reading') {
        showSection('unpaid');
    }
}

// Cart functionality
function addToCart(bookId) {
    const allBooks = [...freeBooks, ...paidBooks];
    const book = allBooks.find(b => b.id === bookId);
    
    if (!book || book.isFree) return;
    
    // Check if already in cart
    if (cart.some(item => item.id === bookId)) {
        alert('Bu kitab artƒ±q s…ôb…ôtd…ôdir!');
        return;
    }
    
    cart.push(book);
    updateCartDisplay();
    alert('Kitab s…ôb…ôt…ô …ôlav…ô edildi!');
}

function updateCartDisplay() {
    document.getElementById('cartCount').textContent = cart.length;
}

function showCart() {
    const cartModal = document.getElementById('cartModal');
    const cartItems = document.getElementById('cartItems');
    
    if (cart.length === 0) {
        cartItems.innerHTML = '<p>S…ôb…ôt bo≈üdur</p>';
    } else {
        let cartHTML = '';
        let total = 0;
        
        cart.forEach(book => {
            const price = parseFloat(book.price.replace(' AZN', ''));
            total += price;
            cartHTML += `
                <div style="display: flex; justify-content: space-between; align-items: center; padding: 10px; border-bottom: 1px solid #eee;">
                    <div>
                        <strong>${book.title}</strong><br>
                        <small>${book.author}</small>
                    </div>
                    <div>
                        <span>${book.price}</span>
                        <button onclick="removeFromCart(${book.id})" style="margin-left: 10px; background: #ff6b6b; color: white; border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;">Sil</button>
                    </div>
                </div>
            `;
        });
        
        cartHTML += `<div style="margin-top: 15px; text-align: right;"><strong>C…ômi: ${total.toFixed(2)} AZN</strong></div>`;
        cartItems.innerHTML = cartHTML;
    }
    
    cartModal.style.display = 'flex';
}

function closeCart() {
    document.getElementById('cartModal').style.display = 'none';
}

function removeFromCart(bookId) {
    cart = cart.filter(book => book.id !== bookId);
    updateCartDisplay();
    showCart(); // Refresh cart display
}

function checkout() {
    if (cart.length === 0) {
        alert('S…ôb…ôt bo≈üdur!');
        return;
    }
    
    // Simulate payment process
    alert('√ñd…ôni≈ü prosesi simulyasiya edilir...');
    
    setTimeout(() => {
        // Add purchased books to user's library
        cart.forEach(book => {
            addToPurchasedBooks(book.id);
        });
        
        cart = [];
        updateCartDisplay();
        closeCart();
        alert('√ñd…ôni≈ü uƒüurla tamamlandƒ±! Kitablarƒ±nƒ±zƒ± indi oxuya bil…ôrsiniz.');
    }, 2000);
}

// Purchased books management (using memory storage)
let purchasedBooks = [];

function addToPurchasedBooks(bookId) {
    if (!purchasedBooks.includes(bookId)) {
        purchasedBooks.push(bookId);
    }
}

function isPurchased(bookId) {
    return purchasedBooks.includes(bookId);
}

// Event listeners
document.addEventListener('keydown', function(e) {
    if (currentSection === 'reading') {
        if (e.key === 'ArrowLeft') {
            previousPage();
        } else if (e.key === 'ArrowRight') {
            nextPage();
        }
    }
});

// Search on Enter key
document.getElementById('searchInput').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        searchBooks();
    }
});

// Cart icon click
document.querySelector('.user-actions').addEventListener('click', function(e) {
    if (e.target.textContent.includes('S…ôb…ôt') || e.target.closest('span').textContent.includes('S…ôb…ôt')) {
        showCart();
    }
});

// Contact form submission
document.addEventListener('submit', function(e) {
    if (e.target.classList.contains('contact-form')) {
        e.preventDefault();
        alert('Mesajƒ±nƒ±z g√∂nd…ôrildi! Tezlikl…ô sizinl…ô …ôlaq…ô saxlayacaƒüƒ±q.');
        e.target.reset();
    }
});

// Smooth scrolling for navigation
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth'
            });
        }
    });
});

// Auto-hide search results after some time
let searchTimeout;
function showSearchResults(books) {
    clearTimeout(searchTimeout);
    
    let searchSection = document.getElementById('searchResults');
    if (!searchSection) {
        searchSection = document.createElement('section');
        searchSection.id = 'searchResults';
        searchSection.className = 'books-section';
        document.body.appendChild(searchSection);
    }
    
    searchSection.innerHTML = `
        <div class="container">
            <h2>Axtarƒ±≈ü N…ôtic…ôl…ôri (${books.length} kitab tapƒ±ldƒ±)</h2>
            <div class="books-grid" id="searchBooksGrid">
            </div>
        </div>
    `;
    
    const searchGrid = document.getElementById('searchBooksGrid');
    if (books.length === 0) {
        searchGrid.innerHTML = '<p style="text-align: center; grid-column: 1/-1; font-size: 18px; color: #666;">He√ß bir kitab tapƒ±lmadƒ±. Ba≈üqa a√ßar s√∂zl…ôr c…ôhd edin.</p>';
    } else {
        books.forEach(book => {
            searchGrid.appendChild(createBookCard(book));
        });
    }
    
    showSection('searchResults');
}
